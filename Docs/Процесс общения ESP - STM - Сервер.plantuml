@startuml Процесс обновления ПО
skinparam maxMessageSize 100

actor User as user 
participant Server as updserv 
participant ESP as esp 
participant STM32 as stm
participant "Velvet ADC" as vadc

alt can go in parallel
    esp -> esp: Power Up
else
    stm -> stm: Power Up
else
    user -> updserv: Upload new FW (FW.hex, version)
    user -> updserv: Update FW (velvet_id, version)
    updserv -> updserv: Calculate CRC (FW.hex)
end


alt Send Weight CMD
    stm -> esp: Weight Transmit pre CMD
    esp -> stm: Weight Transmit pre RSP 
    esp <- stm: Send Weight {cow_id; timestamp[N]; weight[N]}
    
    updserv <- esp: HTTP POST {velvet_id; cow_id; timestamp[N]; weight[N]} 
    updserv -> esp: HTTP Response
    esp -> stm: Response 

    alt Response is Err || Timeout
        esp -> stm: Transmit over WiFi Error
        stm -> stm: Transmit Data over Lora
    end
end

group Check FW CMD [Every 60s]
    stm -> esp: Check FW CMD [0x01, Version0, Version1]
    esp -> updserv: HTTP GET FW 
    updserv -> esp: HTTP Response version || Err

    alt Response == Err || Timeout
        esp -> stm: Connection Error [0x01, 0x02]
    end

    esp -> esp: Check in Memory Version 

    alt Version != In Memory Version
        loop Response is OK {FW.hex + CRC}
            esp -> updserv: HTTP GET next FW part
            updserv -> esp: HTTP Response next FW part
            esp -> esp: Store FW part to Flash (.hex)
        end
        esp -> esp: Check CRC
        esp -> stm: Restart STM [0x01, 0x01]
        stm -> stm: Jump to Bootloader
    else Version == In Memory Version
        esp -> stm: No Update [0x1, 0x03]
    end
end 

group Bootloader Ready CMD {stm_ver}
    stm->esp: Bootloader Ready CMD [0x02]
    alt stm_ver != esp_ver
        esp -> stm: Size of FW.hex 

        loop while Size of FW >= 0
            esp <- stm: Ready to Receive data
            esp -> stm: Transmit data[STM32_FLASH_PAGE_SIZE]
            stm -> stm: Erase next page
            stm -> stm: Store data to Flash
            stm -> stm: Size of FW.hex - STM32_FLASH_PAGE_SIZE
        end 
    end
    stm -> stm: Jump to Application
end

group Timestamp synchonization [every 15min]
    stm->esp: Get Timestamp CMD
    esp->NTP**: NTP request
    NTP->esp: NTP response
    alt 
        esp->stm: Get Timestamp RSP OK
    else 
        esp->stm: Get Timestamp RSP Error
    end
end 

group Measure Weight
    loop While No Tag ID
        stm->RFID**: Read Tag 
        RFID->stm: Tag ID
        alt Special Tag ID
            stm->stm: Read weight
            stm->stm: Store threshold
        end 
    end 

    loop 120 times
        stm->vadc**: Read weight
        stm->stm: Write to buffer
    end 
    ref over stm: Send Weight 

end 

@enduml